#!/usr/bin/env bash

set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname ${target_file})" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine KZENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine KZENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  KZENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n ${KZENV_ROOT} ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine KZENV_ROOT";
else
  KZENV_ROOT="${KZENV_ROOT%/}";
fi;
export KZENV_ROOT;

if [ -n "${KZENV_HELPERS:-""}" ]; then
  log 'debug' 'KZENV_HELPERS is set, not sourcing helpers again';
else
  [ "${KZENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${KZENV_ROOT}/lib/helpers.sh";
  if source "${KZENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${KZENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${KZENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${KZENV_ROOT}/${dir}', not adding it again";;
    *) 
      log 'debug' "\$PATH does not contain '${KZENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${KZENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################

[ "${#}" -ne 1 ] && log 'error' 'usage: kzenv use <version>';

declare version_requested version regex min_required version_file;

version_requested="${1}";

if [[ "${version_requested}" =~ ^min-required$ ]]; then
  log 'info' 'Detecting minimum required version...';
  min_required="$(kzenv-min-required)" \
    || log 'error' 'kzenv-min-required failed';

  log 'info' "Minimum required version detected: ${min_required}";
  version_requested="${min_required}";
fi;

if [[ "${version_requested}" =~ ^latest\:.*$ ]]; then
  version="${version_requested%%\:*}";
  regex="${version_requested##*\:}";
  log 'debug' "Version uses latest keyword with regex: ${regex}";
elif [[ "${version_requested}" =~ ^latest$ ]]; then
  version="${version_requested}";
  regex="^[0-9]\+\.[0-9]\+\.[0-9]\+$";
  log 'debug' "Version uses latest keyword alone. Forcing regex to match stable versions only: ${regex}";
else
  version="${version_requested}";
  regex="^${version_requested}$";
  log 'debug' "Version is explicit: ${version}. Regex enforces the version: ${regex}";
fi;

[ -d "${KZENV_ROOT}/versions" ] \
  || log 'error' 'No versions of kustomize installed. Please install one with: kzenv install';

log 'debug' "Searching ${KZENV_ROOT}/versions for latest version matching ${regex}";
version="$(\ls "${KZENV_ROOT}/versions" \
  | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3 \
  | grep -e "${regex}" \
  | head -n 1
)";

[ -n "${version}" ] \
  && log 'debug' "Found version: ${version}" \
  || log 'error' "No installed versions of kustomize matched '${1}'";

target_path="${KZENV_ROOT}/versions/${version}";
[ -f "${target_path}/kustomize" ] \
  || log 'error' "Version directory for ${version} is present, but the kustomize binary is not! Manual intervention required.";
[ -x "${target_path}/kustomize" ] \
  || log 'error' "Version directory for ${version} is present, but the kustomize binary is not executable! Manual intervention required.";

log 'info' "Switching to v${version}";

version_file="$(kzenv-version-file)";
log 'debug' "Writing \"${version}\" to \"${version_file}\"";
echo "${version}" > "${version_file}" \
  || log 'error' "Switch to v${version} failed";

kustomize version 1>/dev/null \
  || log 'error' "'kustomize version' failed. Something is seriously wrong";
log 'info' "Switching completed";
