#!/usr/bin/env bash

set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${KZENV_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname ${target_file})" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine KZENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine KZENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  KZENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n ${KZENV_ROOT} ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine KZENV_ROOT";
else
  KZENV_ROOT="${KZENV_ROOT%/}";
fi;
export KZENV_ROOT;

if [ -n "${KZENV_HELPERS:-""}" ]; then
  log 'debug' 'KZENV_HELPERS is set, not sourcing helpers again';
else
  [ "${KZENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${KZENV_ROOT}/lib/helpers.sh";
  if source "${KZENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${KZENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${KZENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${KZENV_ROOT}/${dir}', not adding it again";;
    *) 
      log 'debug' "\$PATH does not contain '${KZENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${KZENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################

[ "${#}" -gt 1 ] && log 'error' 'usage: kzenv install [<version>]';

declare version_requested version regex;
declare arg="${1:-""}";

if [ -z "${arg}" ]; then
  version_file="$(kzenv-version-file)";
  log 'debug' "Version File: ${version_file}";
  if [ "${version_file}" != "${KZENV_ROOT}/version" ]; then
    log 'debug' "Version File (${version_file}) is not the default \${KZENV_ROOT}/version (${KZENV_ROOT}/version)";
    version_requested="$(cat "${version_file}")" \
      || log 'error' "Failed to open ${version_file}";
  elif [ -f "${version_file}" ]; then
    log 'debug' "Version File is the default \${KZENV_ROOT}/version (${KZENV_ROOT}/version)";
    version_requested="$(cat "${version_file}")" \
      || log 'error' "Failed to open ${version_file}";
  else
    log 'debug' "Version File is the default \${KZENV_ROOT}/version (${KZENV_ROOT}/version) but it doesn't exist";
    log 'info' 'No version requested on the command line or in the version file search path. Installing "latest"';
    version_requested='latest';
  fi;
else
  version_requested="${arg}";
fi;

log 'debug' "Version Requested: ${version_requested}";

if [[ "${version_requested}" =~ ^min-required$ ]]; then
  log 'info' 'Detecting minimal required version...';
  found_min_required="$(kzenv-min-required)";

  if [[ $? -eq 0 ]]; then
      log 'info' "Min required version is detected as ${found_min_required}";
      version_requested="${found_min_required}";
  else
    exit 1;
  fi;
fi;

if [[ "${version_requested}" =~ ^latest\:.*$ ]]; then
  version="${version_requested%%\:*}";
  regex="${version_requested##*\:}";
elif [[ "${version_requested}" =~ ^latest$ ]]; then
  version="${version_requested}";
  regex="^[0-9]\+\.[0-9]\+\.[0-9]\+$";
else
  version="${version_requested}";
  regex="${version_requested}";
fi;

[ -n "${version}" ] || log 'error' 'Version is not specified. This should not be possible as we default to latest';

log 'debug' "Processing install for version ${version}, using regex ${regex}";
version_temp_url="$(kzenv-list-remote | grep "${regex}" |grep -v "checksum"| head -n 1)";
echo version_obtained is ${version_temp_url}
[ -n "${version_temp_url}" ] || log 'error' "No versions matching '${arg}' found in remote";

dst_path="${KZENV_ROOT}/versions/${version}";
if [ -f "${dst_path}/kustomize" ]; then
  echo "kustomize v${version} is already installed";
  exit 0;
fi;

KZENV_ARCH="${KZENV_ARCH:-amd64}";
case "$(uname -s)" in
  Darwin*)
    os="darwin_${KZENV_ARCH}";
    ;;
  MINGW64*)
    os="windows_${KZENV_ARCH}";
    ;;
  MSYS_NT*)
    os="windows_${KZENV_ARCH}";
    ;;
  CYGWIN_NT*)
    os="windows_${KZENV_ARCH}";
    ;;
  *)
    os="linux_${KZENV_ARCH}";
    ;;
esac;

keybase_bin="$(command -v keybase 2>/dev/null)";
shasum_bin="$(command -v shasum 2>/dev/null)";

KZENV_REMOTE="${KZENV_REMOTE:-https://api.github.com/repos/kubernetes-sigs/kustomize/releases?per_page=100}";
version_url=$(curlw -sf "${KZENV_REMOTE}" |grep browser_download| grep ${version}|grep 'kustomize'| grep ${os}| awk '{print $2}'|tr -d '"');
echo version_url is ${version_url}

shasums_name="kustomize_${version}_SHA256SUMS";

log 'info' "Installing kustomize ${version}";

# Create a local temporary directory for downloads
download_tmp="$(mktemp -d KZENV_download.XXXXXX)" || log 'error' "Unable to create temporary download directory in $(pwd)";
# Clean it up in case of error
trap "rm -rf ${download_tmp}" EXIT;

declare curl_progress="";
case "${KZENV_CURL_OUTPUT:-2}" in
  '2')
    log 'debug' 'Setting curl progress bar with "--progress-bar"';
    curl_progress="--progress-bar";
    ;;
  '1')
    log 'debug' 'Using default curl output';
    curl_progress="";
    ;;
  '0')
    log 'debug' 'Running curl silently with "-s"';
    curl_progress="-s";
    ;;
  *)
    log 'error' 'KZENV_CURL_OUTPUT specified, but not with a support value ([0,1,2])';
    ;;
esac;

kz_name="kustomize_${version}_${os}"
tarball_file=0

if [[ $version_url = *.tar.gz ]]
then
    kustomize_name_file="${kz_name}.tar.gz"
    tarball_file=1
else
    kustomize_name_file="${kz_name}"
fi

log 'info' "Downloading release binary from ${version_url}";
curlw ${curl_progress} -L -f -o "${download_tmp}/${kustomize_name_file}" "${version_url}" || log 'error' 'Binary download failed';

mkdir -p "${dst_path}" || log 'error' "Failed to make directory ${dst_path}";

if [ $tarball_file = 0 ]
then
   declare mv_output="$(mv "${download_tmp}/${kustomize_name_file}" "${dst_path}/kustomize" && chmod +x "${dst_path}/kustomize"  || log 'error' 'Binary copy failed')";
   printf '%s\n' "${mv_output}";
else
   log 'info' "Found tar file! extracting it"
   declare untar_output="$(tar -C "${dst_path}/" -xzf "${download_tmp}/${kustomize_name_file}"  || log 'error' 'Tarball extract process failed')";
   printf '%s\n' "${untar_output}";
fi

log 'info' "Installation of kustomize v${version} successful";
kzenv use "${version}";
