#!/usr/bin/env bash
# Summary: Show the currently-selected kustomize version

set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${KZENV_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname ${target_file})" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine KZENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine KZENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  KZENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n ${KZENV_ROOT} ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine KZENV_ROOT";
else
  KZENV_ROOT="${KZENV_ROOT%/}";
fi;
export KZENV_ROOT;

if [ -n "${KZENV_HELPERS:-""}" ]; then
  log 'debug' 'KZENV_HELPERS is set, not sourcing helpers again';
else
  [ "${KZENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${KZENV_ROOT}/lib/helpers.sh";
  if source "${KZENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${KZENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${KZENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${KZENV_ROOT}/${dir}', not adding it again";;
    *) 
      log 'debug' "\$PATH does not contain '${KZENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${KZENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################

[ -d "${KZENV_ROOT}/versions" ] \
  || log 'error' 'No versions of kustomize installed. Please install one with: kzenv install';

KZENV_VERSION_FILE="$(kzenv-version-file)" \
  && log 'debug' "KZENV_VERSION_FILE retrieved from kzenv-version-file: ${KZENV_VERSION_FILE}" \
  || log 'error' 'Failed to retrieve KZENV_VERSION_FILE from kzenv-version-file';

KZENV_VERSION="$(cat "${KZENV_VERSION_FILE}" || true)" \
  && log 'debug' "KZENV_VERSION specified in KZENV_VERSION_FILE: ${KZENV_VERSION}";

if [[ "${KZENV_VERSION}" =~ ^latest.*$ ]]; then
  log 'debug' 'KZENV_VERSION uses "latest" keyword';

  if [[ "${KZENV_VERSION}" =~ ^latest\:.*$ ]]; then
    regex="${KZENV_VERSION##*\:}";
    log 'debug' "\"latest\" keyword uses regex: ${regex}";
  fi;

  version="$(\ls "${KZENV_ROOT}/versions" \
    | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3 \
    | grep -e "${regex}" \
    | head -n 1)";

  if [ -n "${version}" ]; then
    log 'debug' "Version selected: ${version}";
    KZENV_VERSION="${version}"
  else
    log 'error' "No installed versions of kustomize matched '${KZENV_VERSION}'";
  fi;

else
  log 'debug' 'KZENV_VERSION does not use "latest" keyword';
fi;

[ -z "${KZENV_VERSION}" ] \
  && log 'error' "Version could not be resolved (set by ${KZENV_VERSION_FILE} or KZENV use <version>)";

if [ -d "${KZENV_ROOT}/versions/${KZENV_VERSION}" ]; then
  echo "${KZENV_VERSION}";
else
  log 'error' "version '${KZENV_VERSION}' is not installed (set by ${KZENV_VERSION_FILE})";
fi;
